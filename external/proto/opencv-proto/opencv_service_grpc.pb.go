// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: opencv_service.proto

package opencv_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenCVService_FindTabBox_FullMethodName     = "/opencv_service.OpenCVService/FindTabBox"
	OpenCVService_GetHpMpPercent_FullMethodName = "/opencv_service.OpenCVService/GetHpMpPercent"
)

// OpenCVServiceClient is the client API for OpenCVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenCVServiceClient interface {
	FindTabBox(ctx context.Context, in *FindTabBoxRequest, opts ...grpc.CallOption) (*FindTabBoxResponse, error)
	GetHpMpPercent(ctx context.Context, in *GetHpMpPercentRequest, opts ...grpc.CallOption) (*GetHpMpPercentResponse, error)
}

type openCVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCVServiceClient(cc grpc.ClientConnInterface) OpenCVServiceClient {
	return &openCVServiceClient{cc}
}

func (c *openCVServiceClient) FindTabBox(ctx context.Context, in *FindTabBoxRequest, opts ...grpc.CallOption) (*FindTabBoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindTabBoxResponse)
	err := c.cc.Invoke(ctx, OpenCVService_FindTabBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCVServiceClient) GetHpMpPercent(ctx context.Context, in *GetHpMpPercentRequest, opts ...grpc.CallOption) (*GetHpMpPercentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHpMpPercentResponse)
	err := c.cc.Invoke(ctx, OpenCVService_GetHpMpPercent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenCVServiceServer is the server API for OpenCVService service.
// All implementations must embed UnimplementedOpenCVServiceServer
// for forward compatibility.
type OpenCVServiceServer interface {
	FindTabBox(context.Context, *FindTabBoxRequest) (*FindTabBoxResponse, error)
	GetHpMpPercent(context.Context, *GetHpMpPercentRequest) (*GetHpMpPercentResponse, error)
	mustEmbedUnimplementedOpenCVServiceServer()
}

// UnimplementedOpenCVServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenCVServiceServer struct{}

func (UnimplementedOpenCVServiceServer) FindTabBox(context.Context, *FindTabBoxRequest) (*FindTabBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTabBox not implemented")
}
func (UnimplementedOpenCVServiceServer) GetHpMpPercent(context.Context, *GetHpMpPercentRequest) (*GetHpMpPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHpMpPercent not implemented")
}
func (UnimplementedOpenCVServiceServer) mustEmbedUnimplementedOpenCVServiceServer() {}
func (UnimplementedOpenCVServiceServer) testEmbeddedByValue()                       {}

// UnsafeOpenCVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenCVServiceServer will
// result in compilation errors.
type UnsafeOpenCVServiceServer interface {
	mustEmbedUnimplementedOpenCVServiceServer()
}

func RegisterOpenCVServiceServer(s grpc.ServiceRegistrar, srv OpenCVServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpenCVServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenCVService_ServiceDesc, srv)
}

func _OpenCVService_FindTabBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTabBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCVServiceServer).FindTabBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCVService_FindTabBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCVServiceServer).FindTabBox(ctx, req.(*FindTabBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCVService_GetHpMpPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHpMpPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCVServiceServer).GetHpMpPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCVService_GetHpMpPercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCVServiceServer).GetHpMpPercent(ctx, req.(*GetHpMpPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenCVService_ServiceDesc is the grpc.ServiceDesc for OpenCVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenCVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opencv_service.OpenCVService",
	HandlerType: (*OpenCVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTabBox",
			Handler:    _OpenCVService_FindTabBox_Handler,
		},
		{
			MethodName: "GetHpMpPercent",
			Handler:    _OpenCVService_GetHpMpPercent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opencv_service.proto",
}
